# core/instagram_publisher.py

import os
import json
import time
import requests
from time import sleep
from dotenv import load_dotenv
from utils.image_tools import prepare_for_instagram

load_dotenv()

IG_USER_ID = os.getenv("IG_USER_ID")
IG_ACCESS_TOKEN = os.getenv("IG_ACCESS_TOKEN")

def _is_token_invalid(resp_text: str) -> bool:
    try:
        data = json.loads(resp_text)
        err = data.get("error") or {}
        return int(err.get("code", 0)) == 190
    except Exception:
        return False


def publish_to_instagram(image_url: str, caption: str, local_path: str = None):
    print("üì∏ –ü—É–±–ª–∏–∫—É–µ–º –≤ Instagram...")

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å, –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º IG-friendly –≤–µ—Ä—Å–∏—é –∏ –ø–µ—Ä–µ–∑–∞–ª—å—ë–º –Ω–∞ FreeImage
    if local_path and os.path.exists(local_path):
        safe_jpg = prepare_for_instagram(local_path, "data/ig_cover.jpg", variant="portrait")
        # –ó–∞–≥—Ä—É–∑–∏–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ FreeImage.host
        from core.freeimage_uploader import upload_to_freeimage
        image_url = upload_to_freeimage(safe_jpg)

    # 1. –°–æ–∑–¥–∞–Ω–∏–µ media object
    create_url = f"https://graph.facebook.com/v18.0/{IG_USER_ID}/media"
    create_params = {
        "image_url": image_url,
        "caption": caption,
        "access_token": IG_ACCESS_TOKEN
    }
    # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å–ª—É—á–∞–π —Å–µ—Ç–µ–≤—ã—Ö/–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–±–æ–µ–≤
    for attempt in range(1, 4):
        create_resp = requests.post(create_url, data=create_params, timeout=30)
        if create_resp.status_code == 200:
            break
        # –¢–æ–∫–µ–Ω –ø—Ä–æ—Ç—É—Ö ‚Äî –Ω–µ –±—É–¥–µ–º —Ä–µ—Ç—Ä–∞–∏—Ç—å, —Å—Ä–∞–∑—É —Ñ–µ–π–ª–∏–º –ø–æ–Ω—è—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        if _is_token_invalid(create_resp.text):
            raise Exception(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è media –æ–±—ä–µ–∫—Ç–∞: —Ç–æ–∫–µ–Ω Instagram –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (code 190)."
                " –û–±–Ω–æ–≤–∏—Ç–µ IG_ACCESS_TOKEN –≤ .env –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å."
            )
        if attempt < 3:
            time.sleep(3 * attempt)
            continue
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è media –æ–±—ä–µ–∫—Ç–∞: {create_resp.text}")

    creation_id = create_resp.json().get("id")
    print(f"üÜî Media ID: {creation_id}")

    # 2. –ü—É–±–ª–∏–∫–∞—Ü–∏—è media object
    publish_url = f"https://graph.facebook.com/v18.0/{IG_USER_ID}/media_publish"
    publish_params = {
        "creation_id": creation_id,
        "access_token": IG_ACCESS_TOKEN
    }

    sleep(5)  # –¥–∞—Ç—å IG –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    for attempt in range(1, 4):
        publish_resp = requests.post(publish_url, data=publish_params, timeout=30)
        if publish_resp.status_code == 200:
            break
        if _is_token_invalid(publish_resp.text):
            raise Exception(
                "‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Instagram: —Ç–æ–∫–µ–Ω Instagram –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (code 190)."
                " –û–±–Ω–æ–≤–∏—Ç–µ IG_ACCESS_TOKEN –≤ .env –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å."
            )
        if attempt < 3:
            time.sleep(3 * attempt)
            continue
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Instagram: {publish_resp.text}")

    print("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Instagram")