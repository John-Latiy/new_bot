import argparse
import asyncio

from utils.time_windows import get_time_range_for_mode
from core.news_collector import fetch_new_posts
from core.text_processor import generate_summary
from core.image_prompt_generator import generate_image_prompt
from core.image_generator import generate_image
from core.publisher import publish_to_telegram
from core.instagram_publisher import publish_to_instagram
from core.freeimage_uploader import upload_to_freeimage
from utils.post_logger import log_post_event


def parse_args():
    parser = argparse.ArgumentParser(description="News Publisher Bot")
    parser.add_argument(
        "--mode",
        required=True,
        choices=["morning", "midday", "evening"],
        help="Mode of the day"
    )
    parser.add_argument(
        "--force",
        action="store_true",
        help="Proceed even if no news found for the time window (use fallback summary)."
    )
    return parser.parse_args()


async def main():
    args = parse_args()
    mode = args.mode

    print(f"\nüîÑ –†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: {mode}")
    start_time, end_time = get_time_range_for_mode(mode)
    print(f"üïí –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ –ú–æ—Å–∫–≤–µ: {start_time} ‚Üí {end_time}\n")

    # –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π
    raw_posts = await fetch_new_posts(
        start_time,
        end_time,
        limit_per_channel=10
    )
    if not raw_posts:
        if not args.force:
            print("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
            log_post_event({
                "mode": mode,
                "stage": "collect",
                "status": "no_posts",
                "start_time": str(start_time),
                "end_time": str(end_time),
            })
            return
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –æ–∫–Ω–æ ‚Äî –≤–∫–ª—é—á–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∏ –ø—É–±–ª–∏–∫—É—é –∫—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç.")
            log_post_event({
                "mode": mode,
                "stage": "collect",
                "status": "no_posts_forced_publish",
                "start_time": str(start_time),
                "end_time": str(end_time),
                "force": True,
            })
    else:
        log_post_event({
            "mode": mode,
            "stage": "collect",
            "status": "ok",
            "count": len(raw_posts),
            "start_time": str(start_time),
            "end_time": str(end_time),
        })

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    print("üìù GPT —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–≤—è–∑–Ω—É—é —Å–≤–æ–¥–∫—É...")
    try:
        if raw_posts:
            summary = generate_summary(raw_posts)
        else:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–ª–±—ç–∫, –µ—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç ‚Äî –∫—Ä–∞—Ç–∫–∏–π —à–∞–±–ª–æ–Ω
            summary = (
                '"–ö—Ä–∞—Ç–∫–∏–π —É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç"\n'
                "–°–µ–≥–æ–¥–Ω—è –ø—É–±–ª–∏–∫—É–µ–º —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π –≤—ã–ø—É—Å–∫: –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ –º–∏—Ä–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö, –Ω–µ—Ñ—Ç—å –∏ –∑–æ–ª–æ—Ç–æ –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Ñ–æ–∫—É—Å–µ, –≤–Ω–∏–º–∞–Ω–∏–µ –∫ —Ä–µ—à–µ–Ω–∏—è–º —Ü–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–æ–≤ –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏.\n\n"
                "#–≠–∫–æ–Ω–æ–º–∏–∫–∞ #–§–∏–Ω–∞–Ω—Å—ã #–†—ã–Ω–∫–∏"
            )
        print(f"\nüì¢ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞:\n\n{summary}\n")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {e}\n")
        log_post_event({
            "mode": mode,
            "stage": "summary",
            "status": "error",
            "error": str(e),
        })
        return
    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–≤–æ–¥–∫–∏
    log_post_event({
        "mode": mode,
        "stage": "summary",
        "status": "ok",
        "chars": len(summary or ""),
    })

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    print("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞...")
    prompt = generate_image_prompt(summary)
    print(f"\nüß† GPT –ø—Ä–æ–º–ø—Ç:\n{prompt}\n")
    log_post_event({
        "mode": mode,
        "stage": "prompt",
        "status": "ok",
        "chars": len(prompt or ""),
        "sample": (prompt or "")[:160],
    })

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_path = "data/final_cover.png"
    print("\nüñº Ô∏è–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–æ–∂–∫–∏...")
    try:
        image_path = generate_image(prompt)
        print(f"‚úÖ –û–±–ª–æ–∂–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {image_path}\n")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–∫–∏, –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n{e}")
        log_post_event({
            "mode": mode,
            "stage": "image",
            "status": "error",
            "error": str(e),
        })
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ FreeImage.host
    try:
        print("‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–æ–∂–∫—É –Ω–∞ FreeImage.host...")
        image_url = upload_to_freeimage(image_path)
        print(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}\n")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥: {e}")
        log_post_event({
            "mode": mode,
            "stage": "upload",
            "status": "error",
            "error": str(e),
        })
        return
    log_post_event({
        "mode": mode,
        "stage": "upload",
        "status": "ok",
        "image_url": image_url,
    })

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
    print("üì£ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram...")
    try:
        publish_to_telegram(summary, image_path)
        print("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: {e}")
        log_post_event({
            "mode": mode,
            "stage": "telegram",
            "status": "error",
            "error": str(e),
        })
    else:
        log_post_event({
            "mode": mode,
            "stage": "telegram",
            "status": "ok",
        })

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Instagram
    print("üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Instagram...")
    try:
        # –ü–µ—Ä–µ–¥–∞—ë–º –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ aspect ratio
        publish_to_instagram(image_url, summary, image_path)
        print("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Instagram")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Instagram: {e}")
        log_post_event({
            "mode": mode,
            "stage": "instagram",
            "status": "error",
            "error": str(e),
        })
        return
    else:
        log_post_event({
            "mode": mode,
            "stage": "instagram",
            "status": "ok",
        })

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —É—Å–ø–µ—à–Ω—ã–π –ª–æ–≥
    log_post_event({
        "mode": mode,
        "stage": "done",
        "status": "success",
        "start_time": str(start_time),
        "end_time": str(end_time),
        "image_path": image_path,
        "image_url": image_url,
    })


if __name__ == "__main__":
    asyncio.run(main())
