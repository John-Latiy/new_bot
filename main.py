import argparse
import asyncio

from utils.time_windows import get_time_range_for_mode
from core.news_collector import fetch_new_posts
from core.text_processor import generate_summary
from core.image_prompt_generator import generate_image_prompt
from core.image_generator import generate_image
from core.publisher import publish_to_telegram
from core.instagram_publisher import publish_to_instagram
from core.freeimage_uploader import upload_to_freeimage


def parse_args():
    parser = argparse.ArgumentParser(description="News Publisher Bot")
    parser.add_argument(
        "--mode",
        required=True,
        choices=["morning", "midday", "evening"],
        help="Mode of the day"
    )
    return parser.parse_args()


async def main():
    args = parse_args()
    mode = args.mode

    print(f"\nüîÑ –†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: {mode}")
    start_time, end_time = get_time_range_for_mode(mode)
    print(f"üïí –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ –ú–æ—Å–∫–≤–µ: {start_time} ‚Üí {end_time}\n")

    # –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π
    raw_posts = await fetch_new_posts(
        start_time,
        end_time,
        limit_per_channel=10
    )
    if not raw_posts:
        print("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    print("üìù GPT —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–≤—è–∑–Ω—É—é —Å–≤–æ–¥–∫—É...")
    try:
        summary = generate_summary(raw_posts)
        print(f"\nüì¢ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞:\n\n{summary}\n")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {e}\n")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    print("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞...")
    disclaimer = "(This image is for informational and artistic purposes only. It does not promote violence, politics, or any sensitive content.) "
    prompt = disclaimer + generate_image_prompt(summary)
    print(f"\nüß† GPT –ø—Ä–æ–º–ø—Ç:\n{prompt}\n")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_path = "data/final_cover.png"
    print("\nüñº Ô∏è–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–æ–∂–∫–∏...")
    try:
        image_path = generate_image(prompt)
        print(f"‚úÖ –û–±–ª–æ–∂–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {image_path}\n")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–∫–∏, –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n{e}")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ FreeImage.host
    try:
        print("‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–æ–∂–∫—É –Ω–∞ FreeImage.host...")
        image_url = upload_to_freeimage(image_path)
        print(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}\n")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥: {e}")
        return

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
    print("üì£ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram...")
    try:
        publish_to_telegram(summary, image_path)
        print("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: {e}")

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Instagram
    print("üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Instagram...")
    try:
        publish_to_instagram(image_url, summary)
        print("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Instagram")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Instagram: {e}")


if __name__ == "__main__":
    asyncio.run(main())